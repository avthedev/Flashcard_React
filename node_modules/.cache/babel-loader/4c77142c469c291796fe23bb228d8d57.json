{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anono\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\decks\\\\DeckPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useRouteMatch, Route, Switch } from \"react-router-dom\";\nimport StudyButton from \"../Deck/DeckButtons/StudyButton\";\nimport EditButton from \"../Deck/DeckButtons/EditButton\";\nimport AddCardsButton from \"../Deck/DeckButtons/AddCardsButton\";\nimport DeleteButton from \"../Deck/DeckButtons/DeleteButton\";\nimport { deleteCard, listCards, readDeck } from \"../../utils/api\";\nimport Breadcrumb from \"../Breadcrumb\";\nimport CardList from \"./CardList\";\nimport DeckStudyPage from \"../decks-study/DeckStudyPage\";\nimport DeckEditPage from \"../decks-edit/DeckEditPage\";\nimport CardRoute from \"../decks-cards/CardRoute\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckPage({\n  deleteDeckClick,\n  routeButtonClick\n}) {\n  _s();\n\n  const [deck, setDeck] = useState({});\n  const [cards, setCards] = useState([1]);\n  const {\n    deckId\n  } = useParams();\n  const {\n    url,\n    path\n  } = useRouteMatch();\n  useEffect(() => {\n    readDeck(deckId, new AbortController().abort()).then(setDeck);\n  }, [deckId, cards]);\n\n  const deleteCardClick = cardId => {\n    if (window.confirm(\"Delete this card?\\n\\nYou will not be able to recover it.\")) {\n      deleteCard(cardId, new AbortController().abort()).then(listCards(deck.id, new AbortController().abort())).then(setCards); //   .then(window.location.reload());\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: `${path}/study`,\n      children: /*#__PURE__*/_jsxDEV(DeckStudyPage, {\n        cards: cards,\n        setCards: setCards,\n        routeButtonClick: routeButtonClick,\n        deck: deck,\n        setDeck: setDeck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${path}/edit`,\n      children: /*#__PURE__*/_jsxDEV(DeckEditPage, {\n        deck: deck,\n        setDeck: setDeck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${path}/cards`,\n      children: /*#__PURE__*/_jsxDEV(CardRoute, {\n        deck: deck,\n        setDeck: setDeck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n        deck: deck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: deck.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: deck.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StudyButton, {\n        url: `${url}/study`,\n        deckButtonClick: routeButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditButton, {\n        url: `${url}/edit`,\n        deckButtonClick: routeButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddCardsButton, {\n        url: `${url}/cards/new`,\n        deckButtonClick: routeButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n        deleteDeckClick: deleteDeckClick,\n        deckId: deck.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {\n        cards: deck.cards,\n        deleteCardClick: deleteCardClick,\n        cardButtonClick: routeButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DeckPage, \"U5s+tqP402/dudiJ8dfXeHxwJDc=\", false, function () {\n  return [useParams, useRouteMatch];\n});\n\n_c = DeckPage;\nexport default DeckPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckPage\");","map":{"version":3,"sources":["C:/Users/anono/Project_Flashcards_Qualified_1/src/Layout/decks/DeckPage.jsx"],"names":["React","useEffect","useState","useParams","useRouteMatch","Route","Switch","StudyButton","EditButton","AddCardsButton","DeleteButton","deleteCard","listCards","readDeck","Breadcrumb","CardList","DeckStudyPage","DeckEditPage","CardRoute","DeckPage","deleteDeckClick","routeButtonClick","deck","setDeck","cards","setCards","deckId","url","path","AbortController","abort","then","deleteCardClick","cardId","window","confirm","id","name","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useRouteMatch, Route, Switch } from \"react-router-dom\";\r\nimport StudyButton from \"../Deck/DeckButtons/StudyButton\";\r\nimport EditButton from \"../Deck/DeckButtons/EditButton\";\r\nimport AddCardsButton from \"../Deck/DeckButtons/AddCardsButton\";\r\nimport DeleteButton from \"../Deck/DeckButtons/DeleteButton\";\r\nimport { deleteCard, listCards, readDeck } from \"../../utils/api\";\r\nimport Breadcrumb from \"../Breadcrumb\";\r\nimport CardList from \"./CardList\";\r\nimport DeckStudyPage from \"../decks-study/DeckStudyPage\";\r\nimport DeckEditPage from \"../decks-edit/DeckEditPage\";\r\nimport CardRoute from \"../decks-cards/CardRoute\";\r\n\r\nfunction DeckPage({ deleteDeckClick, routeButtonClick }) {\r\n  const [deck, setDeck] = useState({});\r\n  const [cards, setCards] = useState([1]);\r\n  const { deckId } = useParams();\r\n  const { url, path } = useRouteMatch();\r\n\r\n  useEffect(() => {\r\n    readDeck(deckId, new AbortController().abort()).then(setDeck);\r\n  }, [deckId, cards]);\r\n\r\n  const deleteCardClick = (cardId) => {\r\n    if (\r\n      window.confirm(\"Delete this card?\\n\\nYou will not be able to recover it.\")\r\n    ) {\r\n      deleteCard(cardId, new AbortController().abort())\r\n        .then(listCards(deck.id, new AbortController().abort()))\r\n        .then(setCards);\r\n      //   .then(window.location.reload());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${path}/study`}>\r\n        <DeckStudyPage\r\n          cards={cards}\r\n          setCards={setCards}\r\n          routeButtonClick={routeButtonClick}\r\n          deck={deck}\r\n          setDeck={setDeck}\r\n        />\r\n      </Route>\r\n      <Route path={`${path}/edit`}>\r\n        <DeckEditPage deck={deck} setDeck={setDeck} />\r\n      </Route>\r\n      {/* Added CardRoute to seperate cards page components and keep it all from being clumped up in DeckPage */}\r\n      <Route path={`${path}/cards`}>\r\n        <CardRoute deck={deck} setDeck={setDeck} />\r\n      </Route>\r\n      <Route>\r\n        <Breadcrumb deck={deck} />\r\n        <h2>{deck.name}</h2>\r\n        <p>{deck.description}</p>\r\n        <StudyButton url={`${url}/study`} deckButtonClick={routeButtonClick} />\r\n        <EditButton url={`${url}/edit`} deckButtonClick={routeButtonClick} />\r\n        <AddCardsButton\r\n          url={`${url}/cards/new`}\r\n          deckButtonClick={routeButtonClick}\r\n        />\r\n        <DeleteButton deleteDeckClick={deleteDeckClick} deckId={deck.id} />\r\n        <CardList\r\n          cards={deck.cards}\r\n          deleteCardClick={deleteCardClick}\r\n          cardButtonClick={routeButtonClick}\r\n        />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default DeckPage;\r\n"]},"metadata":{},"sourceType":"module"}