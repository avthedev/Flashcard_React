{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anono\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\decks-cards\\\\CardForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { createCard, updateCard } from \"../../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CardForm({\n  createMode = true,\n  deck,\n  deckId,\n  card\n}) {\n  _s();\n\n  const initialFormState = {\n    front: \"\",\n    back: \"\"\n  };\n  const [formState, setFormState] = useState(initialFormState);\n  const {\n    front,\n    back\n  } = formState;\n  const history = useHistory();\n  useEffect(() => {\n    if (card && card.front && card.back) {\n      setFormState({\n        front: card.front,\n        back: card.back\n      });\n    }\n  }, [card]);\n\n  const handleFormChange = event => {\n    setFormState({ ...formState,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    async function createFormCard(formState) {\n      await createCard(deckId, formState, new AbortController().abort());\n      setFormState({ ...initialFormState\n      });\n    }\n\n    async function editFormCard(formState) {\n      await updateCard({ ...card,\n        front: formState.front,\n        back: formState.back\n      }, new AbortController().abort());\n      history.push(`/decks/${deck.id}`);\n      window.location.reload();\n    }\n\n    if (createMode) {\n      createFormCard(formState);\n    } else {\n      editFormCard(formState);\n    }\n  };\n\n  const handleDone = () => {\n    if (createMode) {\n      history.push(`/decks/${deckId}`);\n      window.location.reload();\n    } else {\n      history.push(`/decks/${deckId}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"front\",\n      children: \"Front\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"front\",\n      name: \"front\",\n      required: true,\n      value: front,\n      onChange: handleFormChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"back\",\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"back\",\n      name: \"back\",\n      required: true,\n      value: back,\n      onChange: handleFormChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleDone(),\n      children: \"Done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CardForm, \"BffghWa7hAHQqhYkjNWHByQna+o=\", false, function () {\n  return [useHistory];\n});\n\n_c = CardForm;\nexport default CardForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardForm\");","map":{"version":3,"sources":["C:/Users/anono/Project_Flashcards_Qualified_1/src/Layout/decks-cards/CardForm.jsx"],"names":["React","useEffect","useState","useHistory","createCard","updateCard","CardForm","createMode","deck","deckId","card","initialFormState","front","back","formState","setFormState","history","handleFormChange","event","target","name","value","handleSubmit","preventDefault","createFormCard","AbortController","abort","editFormCard","push","id","window","location","reload","handleDone"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createCard, updateCard } from \"../../utils/api\";\r\n\r\nfunction CardForm({ createMode = true, deck, deckId, card }) {\r\n  const initialFormState = {\r\n    front: \"\",\r\n    back: \"\",\r\n  };\r\n  const [formState, setFormState] = useState(initialFormState);\r\n  const { front, back } = formState;\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (card && card.front && card.back) {\r\n      setFormState({ front: card.front, back: card.back });\r\n    }\r\n  }, [card]);\r\n\r\n  const handleFormChange = (event) => {\r\n    setFormState({\r\n      ...formState,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    async function createFormCard(formState) {\r\n      await createCard(deckId, formState, new AbortController().abort());\r\n      setFormState({ ...initialFormState });\r\n    }\r\n\r\n    async function editFormCard(formState) {\r\n      await updateCard(\r\n        {\r\n          ...card,\r\n          front: formState.front,\r\n          back: formState.back,\r\n        },\r\n        new AbortController().abort()\r\n      );\r\n      history.push(`/decks/${deck.id}`);\r\n      window.location.reload();\r\n    }\r\n\r\n    if (createMode) {\r\n      createFormCard(formState);\r\n    } else {\r\n      editFormCard(formState);\r\n    }\r\n  };\r\n\r\n  const handleDone = () => {\r\n    if (createMode) {\r\n      history.push(`/decks/${deckId}`);\r\n      window.location.reload();\r\n    } else {\r\n      history.push(`/decks/${deckId}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"front\">Front</label>\r\n      <textarea\r\n        id=\"front\"\r\n        name=\"front\"\r\n        required\r\n        value={front}\r\n        onChange={handleFormChange}\r\n      ></textarea>\r\n      <br />\r\n      <label htmlFor=\"back\">Back</label>\r\n      <textarea\r\n        id=\"back\"\r\n        name=\"back\"\r\n        required\r\n        value={back}\r\n        onChange={handleFormChange}\r\n      ></textarea>\r\n      <br />\r\n      <button onClick={() => handleDone()}>Done</button>\r\n      <button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CardForm;\r\n"]},"metadata":{},"sourceType":"module"}