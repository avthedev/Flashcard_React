{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anono\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Deck\\\\DeckForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { createDeck, updateDeck } from \"../../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckForm({\n  createMode = true,\n  deck,\n  deckId\n}) {\n  _s();\n\n  const initialFormState = {\n    name: \"\",\n    description: \"\"\n  };\n  const [formState, setFormState] = useState(initialFormState);\n  const {\n    name,\n    description\n  } = formState;\n  const history = useHistory();\n  useEffect(() => {\n    if (deck && deck.name && deck.description) {\n      setFormState({\n        name: deck.name,\n        description: deck.description\n      });\n    }\n  }, [deck]);\n\n  const handleFormChange = event => {\n    setFormState({ ...formState,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    async function createFormDeck(formState) {\n      const {\n        id\n      } = await createDeck(formState, new AbortController().abort());\n      history.push(`/decks/${id}`);\n    }\n\n    async function editFormDeck(formState) {\n      await updateDeck({ ...deck,\n        name: formState.name,\n        description: formState.description\n      }, new AbortController().abort());\n      history.push(`/decks/${deck.id}`);\n      window.location.reload();\n    }\n\n    if (createMode) {\n      createFormDeck(formState);\n    } else {\n      editFormDeck(formState);\n    }\n  };\n\n  const handleCancel = () => {\n    if (createMode) {\n      history.push(\"/\");\n    } else {\n      history.push(`decks/${deckId}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"name\",\n      children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        name: \"name\",\n        placeholder: \"Deck Name\",\n        required: true,\n        value: name,\n        onChange: handleFormChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"description\",\n      children: \"Description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"description\",\n      name: \"description\",\n      placeholder: \"Brief description of the deck\",\n      required: true,\n      value: description,\n      onChange: handleFormChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleCancel(),\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DeckForm, \"BffghWa7hAHQqhYkjNWHByQna+o=\", false, function () {\n  return [useHistory];\n});\n\n_c = DeckForm;\nexport default DeckForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckForm\");","map":{"version":3,"sources":["C:/Users/anono/Project_Flashcards_Qualified_1/src/Layout/Deck/DeckForm.jsx"],"names":["React","useEffect","useState","useHistory","createDeck","updateDeck","DeckForm","createMode","deck","deckId","initialFormState","name","description","formState","setFormState","history","handleFormChange","event","target","value","handleSubmit","preventDefault","createFormDeck","id","AbortController","abort","push","editFormDeck","window","location","reload","handleCancel"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createDeck, updateDeck } from \"../../utils/api\";\r\n\r\nfunction DeckForm({createMode=true, deck, deckId}) {\r\n    const initialFormState = {\r\n        name: \"\",\r\n        description: \"\",\r\n    };\r\n    const [formState, setFormState] = useState(initialFormState);\r\n    const {name, description} = formState;\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (deck && deck.name && deck.description) {\r\n            setFormState({name: deck.name, description: deck.description});\r\n        }\r\n    }, [deck]);\r\n\r\n    const handleFormChange = (event) => {\r\n        setFormState({\r\n            ...formState,\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        async function createFormDeck(formState) {\r\n            const {id} = await createDeck(formState, new AbortController().abort());\r\n            history.push(`/decks/${id}`);\r\n        }\r\n\r\n        async function editFormDeck(formState) {\r\n            await updateDeck({\r\n                ...deck,\r\n                name: formState.name,\r\n                description: formState.description\r\n            }, new AbortController().abort());\r\n            history.push(`/decks/${deck.id}`);\r\n            window.location.reload();\r\n        }\r\n\r\n        if(createMode) {\r\n            createFormDeck(formState);\r\n        } else {\r\n            editFormDeck(formState);\r\n        }\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        if (createMode) {\r\n            history.push(\"/\");\r\n        } else {\r\n            history.push(`decks/${deckId}`);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label htmlFor=\"name\">\r\n                Name\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Deck Name\"\r\n                    required\r\n                    value={name}\r\n                    onChange={handleFormChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label htmlFor=\"description\">\r\n                Description\r\n            </label>\r\n            <textarea\r\n                id=\"description\"\r\n                name=\"description\"\r\n                placeholder=\"Brief description of the deck\"\r\n                required\r\n                value={description}\r\n                onChange={handleFormChange}\r\n            >\r\n            </textarea>\r\n            <br/>\r\n            <button onClick={() => handleCancel()}>Cancel</button>\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default DeckForm;"]},"metadata":{},"sourceType":"module"}